@import "./variables.css";

.game {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin: auto;
	max-width: 100vw;
	max-height: calc(var(--view-height) - var(--header-size));
}

.board {
	position: relative;
	border: 4px solid var(--carbon);
	background: var(--carbon);
	user-select: none;
}

.grid, .overlay-grid {
	position: absolute;
	width: 100%;
	height: 100%;
	display: grid;
	grid-template-columns: repeat(8, 1fr) minmax(calc(100% / 9), auto);
	grid-template-rows: repeat(8, 1fr) minmax(calc(100% / 9), auto);
}

.cell {
	display: flex;
    align-items: center;
	justify-content: center;
	position: relative;
	background-color: white;
	font-size: 6vmin;
	line-height: 0;
	cursor: pointer;
	overflow: hidden;
}
.cell, .overlay-cell {
	border-style: solid;
	border-color: var(--carbon);
}
.cell:not(:nth-child(9n)), .overlay-cell:not(:nth-child(9n)) {
	border-right-width: 1px;
}
.cell:not(:nth-last-child(-n+9)), .overlay-cell:not(:nth-last-child(-n+9)) {
	border-bottom-width: 1px;
}
.cell:nth-child(3n + 1), .overlay-cell:nth-child(3n + 1) {
	border-left-width: 1px;
}
.cell:nth-child(n+28):not(:nth-child(n+37)),
.overlay-cell:nth-child(n+28):not(:nth-child(n+37)),
.cell:nth-child(n+55):not(:nth-child(n+64)),
.overlay-cell:nth-child(n+55):not(:nth-child(n+64)) {
	border-top-width: 1px;
}

.initial-value {
	font-weight: bold;
	background-color: var(--ash);
}

.hovered-neighbors {
	background-color: var(--steel);
}
.hovered-neighbors.initial-value {
	background-color: var(--steel-grey);
}

.cell.hovered-value {
	background-color: var(--green-steel-light);
	color: var(--green-steel);
}

.cell.error {
	background-color: var(--red-light);
}

.note-1, .note-2, .note-3, .note-4, .note-5,
.note-6, .note-7, .note-8, .note-9 {
	display: flex;
	justify-content: center;
	align-items: center;
	position: absolute;
	transform: translate(-50%, -50%);
	width: 65%;
	height: 65%;
	color: var(--green);
	font-size: 3vmin;
	font-weight: bold;
	z-index: 2;
}
.note-1, .note-2, .note-3 {
	top: 20%;
}
.note-4, .note-5, .note-6 {
	top: 50%;
}
.note-7, .note-8, .note-9 {
	top: 80%;
}
.note-1, .note-4, .note-7 {
	left: 20%;
}
.note-2, .note-5, .note-8 {
	left: 50%;
}
.note-3, .note-6, .note-9 {
	left: 80%;
}

.hovered-note {
	background-image: radial-gradient(closest-side, var(--green-steel-light), transparent);
	color: var(--green-steel);
	z-index: 1;
}

.overlay-grid {
	pointer-events: none;
	z-index: 5;
}

.selected-index.selected-index {
	border-width: 3px 4px 4px 3px;
}
.selected-index:nth-child(3n) {
	border-right-width: 3px;
}
.selected-index:nth-child(3n+1) {
	border-left-width: 3px;
}
.selected-index:nth-child(n+19):not(:nth-child(n+28)),
.selected-index:nth-child(n+46):not(:nth-child(n+55)) {
	border-bottom-width: 3px;
}
.selected-index:nth-child(n+28):not(:nth-child(n+37)),
.selected-index:nth-child(n+55):not(:nth-child(n+64)) {
	border-top-width: 3px;
}
.selected-index:nth-child(-n+9) {
	border-top-width: 0;
}
.selected-index:nth-last-child(-n+9) {
	border-bottom-width: 0;
}
.selected-index:nth-child(9n) {
	border-right-width: 0;
}
.selected-index:nth-child(9n+1) {
	border-left-width: 0;
}

.controls {
	display: grid;
}

.button {
	position: relative;
	border: .5vmin outset var(--grey);
	background-color: var(--slate);
	color: white;
	font-size: 8vmin;
	text-shadow: .5vmin .5vmin var(--carbon);
}
.button:hover:not(:disabled) {
	background-color: var(--slate-light);
}
.button:active:not(:disabled) {
	border-style: inset;
	background-color: var(--slate-dark);
}
.button:disabled {
	filter: brightness(.5);
}
.button.active {
	color: var(--green-light);
}
.mode-button {
	font-size: 4.2vmin;
}

.remaining-count {
	position: absolute;
	top: 10%;
	right: 10%;
	font-size: 3.5vmin;
	text-shadow: .25vmin .25vmin var(--carbon);
}

@media (orientation: landscape) {
	.game {
		flex-direction: row;
		width: 145vh;
	}
	.board {
		width: calc(var(--view-height) - var(--header-size));
		height: calc(var(--view-height) - var(--header-size));
		max-width: calc(100vw - 33vh);
		max-height: calc(100vw - 33vh);
	}
	.controls {
		grid-template-columns: 1fr 1fr;
		grid-template-rows: repeat(6, 1fr);
		grid-auto-flow: column;
		width: 33vh;
		height: calc(var(--view-height) - var(--header-size));
	}
}

@media (orientation: portrait) {
	.game {
		flex-direction: column;
		height: var(--view-height);
	}
	.board {
		width: calc(100vw);
		height: calc(100vw);
		max-width: calc(var(--view-height) - 33vw - var(--header-size));
		max-height: calc(var(--view-height) - 33vw - var(--header-size));
	}
	.controls {
		grid-template-columns: repeat(6, 1fr);
		grid-template-rows: 1fr 1fr;
		grid-auto-flow: row;
		width: 100vw;
		height: 33vw;
	}
}
